#version 430 core

// #pragma optionNV (unroll off)
// #pragma optionNV(debug on)
// #pragma optionNV(fastprecision off)
#pragma optimize(on)
#pragma debug(on)
precision highp int;
precision highp float;
// precision highp vec3;

layout(binding = 0, rgba32f) uniform volatile image2D framebuffer;
layout(binding = 1, rgba32f) uniform volatile image2D normalbuffer;
layout(binding = 0) uniform sampler2D tSet_ReflectNtransparancy; 
layout(binding = 1) uniform sampler2D tSet_EmmitNsmooth; 
layout(binding = 2) uniform sampler2D drawn_ents_frame; 
// uniform sampler2D spritesheet_texture;
uniform vec3 cameraposr;

// layout(binding = 0) uniform float tSet_ReflectNtransparancy; 
uniform float time;
uniform int Ecount;

#define MAX_DEPTH 4
#define NUM_SAMPLES 1
#define PI 3.1415926535
#define FAR_DISTANCE 100000.0
#define nIN 1.0
#define nOUT 1.0
#define WIDTH 30
#define LENGTH 30
#define HEIGHT 16

layout(std430, binding = 0) buffer blocks_ssbo
{
	float blocks[WIDTH*LENGTH*HEIGHT];
};
layout(std430, binding = 1) buffer ents_ssbo
{
	float entities[];
};
layout(std430, binding = 2) buffer sdf
{
	float SDFs[WIDTH*LENGTH*HEIGHT];
};
//constant defines
#define STEP_IS_X 1
#define STEP_IS_Y 2
#define STEP_IS_Z 4

// #define FSTEP_IS_X 2.0
// #define FSTEP_IS_Y 4.0
// #define FSTEP_IS_Z 8.0

vec3 global_light;
vec2 randvec;

vec3 camera_ray_dir  ;
vec3 horizline;
vec3 vertiline;

vec3 camera_pos;

float view_width ;
float view_height;

struct Material
{
    vec3 emmitance;   //for each color
    vec3 reflectance; //for each color
    float smoothness;
    float transparancy;
};

int bitwiseAND(int a, int b) {
  return a & b;
}

int bitwiseOR(int a, int b) {
  return a | b;
}

int bitwiseXOR(int a, int b) {
  return a ^ b;
}

int bitwiseNOT(int a) {
  return ~a;
}

int leftShift(int a, int shift) {
  return a << shift;
}

int rightShift(int a, int shift) {
  return a >> shift;
}

float RandomNoise(vec2 co)
{
    float res = fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);
	randvec.x = randvec.y;
	randvec.y = res;
	return res;
}

float RandomFloat_0to1()
{
	return RandomNoise(randvec);
}

vec2 Random2D()
{
	return normalize(vec2(RandomNoise(randvec), RandomNoise(randvec)));
}

vec3 Random3D()
{
	return normalize(vec3(RandomNoise(randvec), RandomNoise(randvec), RandomNoise(randvec)));
}


vec3 RandomHemispherePoint(vec2 rand)
{
    float cosTheta = sqrt(1.0 - rand.x);
    float sinTheta = sqrt(rand.x);
    float phi = 2.0 * PI * rand.y;
    return vec3(
        cos(phi) * sinTheta,
        sin(phi) * sinTheta,
                   cosTheta);
}

vec3 NormalOrientedHemispherePoint(vec2 rand, vec3 n)
{
    vec3 v = RandomHemispherePoint(rand);
    return dot(v, n) < 0.0 ? -v : v;
}

float GetBlock(in vec3 voxel)
{
	float block;
	// ivec3 v = voxel;

	// if (voxel.x < 0 || voxel.x >= WIDTH ) return 0;
	// else if (voxel.y < 0 || voxel.y >= LENGTH) return 0;
	// else if (voxel.z < 0 || voxel.z >= HEIGHT) return 0;
	ivec3 ivoxel = ivec3(voxel);
	block = blocks[ivoxel.x + ivoxel.y*WIDTH + ivoxel.z*(WIDTH*LENGTH)];
	// block = blocks[voxel.y + voxel.x*WIDTH + voxel.z*WIDTH*LENGTH];

	return block;
}

float get_SDF(ivec3 voxel)
{
	return SDFs[voxel.x + voxel.y*WIDTH + voxel.z*(WIDTH*LENGTH)];
}

Material GetBlockMat_V2(in float block, in vec3 relative_collision_point, in int step_Diretion)
{
	Material mat;

	vec2 uv_leftop;
	vec2 uv_shift;
	vec2 uv;
	float block_tile_num = block;
	uv_leftop.x = fract(block_tile_num / 32.0);
    uv_leftop.y = floor(block_tile_num / 32.0) / 32.0;
	
	vec3 abs_point = abs(relative_collision_point);

	if(abs_point.x > abs_point.y) {
			if(abs_point.x > abs_point.z){
				uv_shift = relative_collision_point.yz;
				uv_leftop += vec2(0, 0);
			} else {
				uv_shift = relative_collision_point.xy;
				uv_leftop += vec2(0, 0.25/32.0);
			}
	} else {
			if(abs_point.y > abs_point.z){
				uv_shift = relative_collision_point.xz;
				uv_leftop += vec2(0.25/32.0, 0);
			} else {
				uv_shift = relative_collision_point.xy;
				uv_leftop += vec2(0, 0.25/32.0);
			}
		}

	// if(step_Diretion == STEP_IS_X) {
	// 	uv_shift = relative_collision_point.yz;
	// 	// uv_leftop += vec2(0, 0);
	// }  if(step_Diretion == STEP_IS_Y) {
	// 	uv_shift = relative_collision_point.xz;
	// 	// uv_leftop += vec2(0.25/32.0, 0);
	// 	uv_leftop.x += 0.25/32.0;
	// }  if(step_Diretion == STEP_IS_Z) {
	// 	uv_shift = relative_collision_point.xy;
	// 	// uv_leftop += vec2(0, 0.25/32.0);
	// 	uv_leftop.y += 0.25/32.0;
	// } 


	// uv = uv_leftop + uv_shift;
	uv = uv_leftop - uv_shift / vec2(32.0, 32.0) / 4;

	vec4 RefltectTransp = texture(tSet_ReflectNtransparancy, uv);
	vec4 EmmitSmooth    = texture(tSet_EmmitNsmooth, uv);

	mat.reflectance  = RefltectTransp.xyz;
	mat.transparancy = 1.0 - RefltectTransp.w;

	mat.emmitance  = EmmitSmooth.xyz;
	mat.smoothness = EmmitSmooth.w;

	return mat;
}

bool InsideScene(in vec3 rayOrigin)
{
	vec3 corner_1 = vec3(0,0,0);
	vec3 corner_2 = vec3(WIDTH,LENGTH,HEIGHT);

	// vec3 s = step(corner_1, rayOrigin) - step(corner_2, rayOrigin); //if we are inside of the box

	// if(s.x * s.y * s.z <= 0.1) return false;

	if(rayOrigin.x <= corner_1.x || rayOrigin.x >= corner_2.x ||
	   rayOrigin.y <= corner_1.y || rayOrigin.y >= corner_2.y ||
	   rayOrigin.z <= corner_1.z || rayOrigin.z >= corner_2.z 
	   ) return false;

	return true;
}

bool InsideScene_byBlockPos(in vec3 block_pos)
{
	vec3 corner_1 = vec3(0 ,0 ,0);
	vec3 corner_2 = vec3(WIDTH,LENGTH,HEIGHT);

	vec3 s = step(corner_1, block_pos) - step(corner_2, block_pos); //if we are inside of the box

	if(s.x * s.y * s.z == 0) return false;

	return true;
}

bool IntersectWithScene(in vec3 rayOrigin, in vec3 rayDirection, out float fraction)
{
	vec3 corner_1 = vec3(0 ,0 ,0);
	vec3 corner_2 = vec3(WIDTH,LENGTH,HEIGHT);

	vec3 planes_1 = (corner_1-rayOrigin) / rayDirection;
	vec3 planes_2 = (corner_2-rayOrigin) / rayDirection;
	
	vec3 planes_near = min(planes_1, planes_2);
	vec3 planes_far  = max(planes_1, planes_2);

	float fraction_near = max(max(planes_near.x, planes_near.y), planes_near.z);
	float fraction_far  = min(min(planes_far.x,  planes_far.y) , planes_far.z);

	fraction = fraction_near;

	if((fraction_far > fraction_near) && (fraction_near > 0.0)){
		return true;
	}
	else return false;
}
//if(!initTvals(tMax, tDelta, block_pos, rayOrigin, rayDirection, extra_fraction)) return false; //does not intersect with scene
bool initTvals(out vec3 tMax, out vec3 tDelta, out ivec3 blockPos, in vec3 rayOrigin, in vec3 rayDirection, out float extra_fraction)
{
	vec3 effective_origin = rayOrigin;
	extra_fraction = 0;
	if(!InsideScene(rayOrigin))
	{
		float fraction_to_get_to_scene = 0.0;
		if (IntersectWithScene(rayOrigin, rayDirection, fraction_to_get_to_scene)){
			extra_fraction = fraction_to_get_to_scene - 0.001;
			effective_origin = rayOrigin + rayDirection*extra_fraction;  
		}
		else { //does intersect with scene
			return false;
		}
	}

	vec3 block_corner1 = floor(effective_origin); //not real center
	vec3 block_corner2 = block_corner1 + vec3(1.0); //now real center

	blockPos = ivec3(block_corner1); //round origin to block pos

	block_corner1 -= effective_origin; //now corners are relative vectors
	block_corner2 -= effective_origin;

	block_corner1 /= rayDirection; //now corners are in relative direction vectors
	block_corner2 /= rayDirection;

	//now we have 2 corners. lest compute max_fractions for each directon to hit block side
	tMax.x = max(block_corner1.x, block_corner2.x); //1 of theese will be negative so max is just to get positive
	tMax.y = max(block_corner1.y, block_corner2.y);
	tMax.z = max(block_corner1.z, block_corner2.z);

	tDelta = 1.0 / abs(rayDirection); //how many dir vectors needeed to move 1.0 across each axys

	return true;
}

vec2 GetBlockPointProjection(vec3 block_point)
{
	vec2 projection;

	projection.x = block_point.x - block_point.y;
	projection.y = -0.5*block_point.x - 0.5*block_point.y + block_point.z;

	return projection;
}

void CollideInsideBlock(in vec3 rayOrigin, in vec3 rayDirection, out float fraction, out vec3 normal, in ivec3 block_pos)
{
	vec3 corner_1 = vec3(block_pos);
	vec3 corner_2 = vec3(block_pos) + vec3(1.0);

	vec3 planes_1 = (corner_1 - rayOrigin) / rayDirection;
	vec3 planes_2 = (corner_2 - rayOrigin) / rayDirection;

	vec3 fractionsForAxis;
	fractionsForAxis.x = max(planes_1.x, planes_2.x);
	fractionsForAxis.y = max(planes_1.y, planes_2.y);
	fractionsForAxis.z = max(planes_1.z, planes_2.z);

	ivec3 steps;
	steps.x = (rayDirection.x < 0) ? -1 : +1;
	steps.y = (rayDirection.y < 0) ? -1 : +1;
	steps.z = (rayDirection.z < 0) ? -1 : +1;
	
	// fraction = min(min(fractionsForAxis.x, fractionsForAxis.y), fractionsForAxis.z);
	if(fractionsForAxis.x < fractionsForAxis.y){
		if(fractionsForAxis.x < fractionsForAxis.z){
			//x is the lowest
			fraction = fractionsForAxis.x;
			normal = vec3(-1.0,0,0) * float(steps.x);
		}
		else{ //z is the lowest
			fraction = fractionsForAxis.z;
			normal = vec3(0,0,-1.0) * float(steps.z);
		}
	} else{
		if(fractionsForAxis.y < fractionsForAxis.z){
			//y is the lowest
			fraction = fractionsForAxis.y;
			normal = vec3(0,-1.0,0) * float(steps.y);
		}
		else{ //z is the lowest
			fraction = fractionsForAxis.z;
			normal = vec3(0,0,-1.0) * float(steps.z);
		}
	}
}

bool CastRay(in vec3 rayOrigin, in vec3 rayDirection, out float fraction, out vec3 normal, out Material material)
{	
	bool block_hit = false, entity_hit = false;

	ivec3 steps;
	steps.x = int(rayDirection.x > 0.0);
	steps.y = int(rayDirection.y > 0.0);
	steps.z = int(rayDirection.z > 0.0);
	steps = 2 * steps - 1;

	vec3 fsteps = -vec3(steps);

	vec3 tMax = vec3(0);
	vec3 tDelta = vec3(0);
	vec3 block_pos = ivec3(0);
	float block_fraction   = 0.0;
	float entity_fraction = 0.0;

	lowp int What_Is_Step= 0;
	ivec3 istep_Diretion = ivec3(0);
	 vec3 fstep_Diretion =  vec3(0);
	// ivec3 vecWhat_Is_Step;
	// vec3 fvecWhat_Is_Step;

	float extra_fraction = 0.0;
	if(!initTvals(tMax, tDelta, block_pos, rayOrigin, rayDirection, extra_fraction)) return false; //does not intersect with scene

	float current_block = GetBlock(block_pos);
	// if(current_block != 0){
		// CollideInsideBlock(rayOrigin, rayDirection, block_fraction, normal, block_pos);
	// }
	int iterations = 0;
	while (true) {
		// normal = vec3(0);
	   	// istep_Diretion = ivec3(0);
	   	fstep_Diretion =  vec3(0);
		// What_Is_Step = 1;
// for(int i=0; i < 64; i++)
// {
	fstep_Diretion.x += float(tMax.x < tMax.y && tMax.x < tMax.z);
	fstep_Diretion.y += float(tMax.x >= tMax.y && tMax.y < tMax.z);
	fstep_Diretion.z += float((tMax.x < tMax.y && tMax.x >= tMax.z) || (tMax.x >= tMax.y && tMax.y >= tMax.z));

		// if(tMax.x < tMax.y) {
		// 	if(tMax.x < tMax.z){
		// 		// block_pos.x += steps.x; 
		// 		// block_fraction = tMax.x;
		// 		// tMax.x += tDelta.x;
		// 		// normal.x = fsteps.x;

		// 		// What_Is_Step = STEP_IS_X;
		// 		fstep_Diretion.x = 1;
		// 		// istep_Diretion.x = 1;
		// 	} else {
		// 		// block_pos.z += steps.z;
		// 		// block_fraction = tMax.z;
		// 		// tMax.z += tDelta.z;
		// 		// normal.z = fsteps.z;

		// 		// What_Is_Step = STEP_IS_Z;
		// 		fstep_Diretion.z = 1;
		// 		// istep_Diretion.z = 1;
		// 	}
		// } else {
		// 	if(tMax.y < tMax.z){
		// 		// block_pos.y += steps.y;
		// 		// block_fraction = tMax.y;
		// 		// tMax.y += tDelta.y;
		// 		// normal.y = fsteps.y;

		// 		// What_Is_Step = STEP_IS_Y;
		// 		fstep_Diretion.y = 1;
		// 		// istep_Diretion.y = 1;
		// 	} else {
		// 		// block_pos.z += steps.z;
		// 		// block_fraction = tMax.z;
		// 		// tMax.z += tDelta.z;
		// 		// normal.z = fsteps.z;

		// 		// What_Is_Step = STEP_IS_Z;
		// 		fstep_Diretion.z = 1;
		// 		// istep_Diretion.z = 1;
		// 	}
		// }
		// vecWhat_Is_Step.x = (What_Is_Step & 1) >> 0;
		// vecWhat_Is_Step.y = (What_Is_Step & 2) >> 1;
		// vecWhat_Is_Step.z = (What_Is_Step & 4) >> 2;
		// block_pos += steps * vecWhat_Is_Step;
		// fvecWhat_Is_Step = vec3(vecWhat_Is_Step);
		// tMax += tDelta * fvecWhat_Is_Step;

		block_pos -= fsteps * fstep_Diretion;
		tMax += tDelta * fstep_Diretion;

		current_block = GetBlock(block_pos);
// }
		
		if(current_block > 0.5)
		{
			block_hit = true;
			break;
		}
		
		iterations++;
		// if(iterations > 64)
		if(!InsideScene_byBlockPos(block_pos) || iterations > 64)
		{
			block_hit = false;
			break;
		}

		// if(iterations > 64)
		// {
		// 	block_hit = false;
		// 	break;
		// }
	};
	// vecWhat_Is_Step.x = (What_Is_Step & 1) >> 0;
	// vecWhat_Is_Step.y = (What_Is_Step & 2) >> 1;
	// vecWhat_Is_Step.z = (What_Is_Step & 4) >> 2;
	// vecWhat_Is_Step = ivec3(0);
	// vecWhat_Is_Step.x = int(What_Is_Step == STEP_IS_X);
	// vecWhat_Is_Step.y = int(What_Is_Step == STEP_IS_Y);
	// vecWhat_Is_Step.z = int(What_Is_Step == STEP_IS_Z);
	// if(What_Is_Step == STEP_IS_X) vecWhat_Is_Step.x = 1;
	// else if(What_Is_Step == STEP_IS_Y) vecWhat_Is_Step.y = 1;
	// else if(What_Is_Step == STEP_IS_Z) vecWhat_Is_Step.z = 1;
	// fvecWhat_Is_Step = vec3(vecWhat_Is_Step);
	// block_fraction = 0;
	// block_fraction += (tMax.x - tDelta.x) * fvecWhat_Is_Step.x;
	// block_fraction += (tMax.y - tDelta.y) * fvecWhat_Is_Step.y;
	// block_fraction += (tMax.z - tDelta.z) * fvecWhat_Is_Step.z;
	// block_fraction += (tMax.x - tDelta.x) * float();
	// block_fraction += (tMax.y - tDelta.y) * float();
	// block_fraction += (tMax.z - tDelta.z) * float();
	// normal = fvecWhat_Is_Step * fsteps;
	normal = vec3(0);
	vec3 tFinal = tMax - tDelta;
	// vec3 tFinal = tMax;
	if(tFinal.x > tFinal.y) {
			if(tFinal.x > tFinal.z){
				normal.x = fsteps.x;
				block_fraction = tFinal.x;
			} else {
				normal.z = fsteps.z;
				block_fraction = tFinal.z;
			}
	} else {
			if(tFinal.y > tFinal.z){
				normal.y = fsteps.y;
				block_fraction = tFinal.y;
			} else {
				normal.z = fsteps.z;
				block_fraction = tFinal.z;
			}
		}

	block_fraction += extra_fraction;
	// if(block_hit)
	// {
		vec3 collision_point = (rayOrigin + rayDirection*block_fraction);
		vec3 relative_collision_point = collision_point - (vec3(block_pos) + vec3(0.5)); 
		// vec2 collision_point_projection = GetBlockPointProjection(relative_collision_point);

		// material = GetBlockMat(current_block, collision_point_projection);
		material = GetBlockMat_V2(current_block, relative_collision_point, What_Is_Step);
		fraction = block_fraction;
	// }

	//------------------------------// Entities
	vec3 relativePos = rayOrigin - camera_pos;
	vec3 entity_camera_dir = normalize(vec3(-1,-1,0));
	//along Normal to camera plane 
	vec2 origin2CamProj;
	origin2CamProj.x = dot(relativePos, horizline); //in block
	origin2CamProj.y = dot(relativePos, vertiline); //in block
	// vec2 image_coords = origin2CamProj / vec2(view_width, view_height) * 2.0; //relative to screen
	
	float ray2CamDist = dot(relativePos, entity_camera_dir); //how much it takes to reach camera plane
	float ray2CamStep = dot(rayDirection, entity_camera_dir);
	vec2 ray2CamProj;
	ray2CamProj.x = dot(rayDirection, horizline);
	ray2CamProj.y = dot(rayDirection, vertiline);

	vec4 entityColor;
	
	//for each check if intersects
	// int 
	// Ecount = min(Ecount)Ecount
	for(int i=0; i < Ecount; i++)
	{
		float entity2CamDist = entities[i];
		// entity2CamDist = +30.0f;
		float deltaDist = ray2CamDist - entity2CamDist;

		entity_fraction = -deltaDist / ray2CamStep;
		// vec2 rayOriginCameraProjection = 
		vec2 hitPoint = origin2CamProj + ray2CamProj * entity_fraction; //projection of where ray interesects entity to camera plane
		vec2 hitPointUV = (hitPoint / vec2(view_width, view_height) * vec2(-2.0, -2.0)) - vec2(0.5); //on rendered entity frame

		entityColor = texture(drawn_ents_frame, hitPointUV);

		if(entityColor.w != 0)
		{
			if((block_hit && (entity_fraction < block_fraction)) || (!block_hit && (entity_fraction > 0)))
			{
				material.reflectance = entityColor.xyz;
				material.emmitance = entityColor.xyz*0.05;
				material.transparancy = 0.0;
				material.smoothness   = 0.666;


				// when in front then positive, when in back - negative
				normal = normalize(vec3(10,10,0));
				normal = -camera_ray_dir;
				normal  = +normalize(vec3(1, 1, +0.2));
				fraction = entity_fraction;
				entity_hit = true;
				break;
			}
		}
	}
	
		// block_fraction += extra_fraction;

		// vec3 collision_point = (rayOrigin + rayDirection*block_fraction);
		// vec3 relative_collision_point = collision_point - (vec3(block_pos) + vec3(0.5)); 
		// // vec2 collision_point_projection = GetBlockPointProjection(relative_collision_point);

		// // material = GetBlockMat(current_block, collision_point_projection);
		// material = GetBlockMat_V2(current_block, relative_collision_point);
		// fraction = block_fraction;
	// bool mat_Ent;
	// bool mat_Block;
	// if(block_hit){
	// 	if(entity_hit && (entity_fraction < block_fraction)){
	// 		mat_Ent = true;
	// 	} else {
	// 		mat_Block = true;
	// 	}
	// } else {
	// 	if(entity_hit)
	// 	{
	// 		mat_Ent = true;
	// 	}
	// 	else {
	// 		//NOTHING
	// 	}
	// }

	// block_fraction += extra_fraction;
	// if(entity_hit && ((entity_fraction < block_fraction) || !block_hit)){
	// 	material.reflectance = entityColor.xyz;
	// 	material.emmitance = entityColor.xyz*0.1;
	// 	material.transparancy = 0.0;
	// 	material.smoothness   = 0.666;
	// 	//when in front then positive, when in back - negative
	// 	normal = normalize(vec3(10,10,0));
	// 	// normal = -camera_ray_dir;
	// 	// normal  = +normalize(vec3(1, 1, +0.2));
	// 	fraction = entity_fraction;
	// } else if (block_hit && ((block_fraction < entity_fraction) || !entity_hit)){

	// 	vec3 collision_point = (rayOrigin + rayDirection*block_fraction);
	// 	vec3 relative_collision_point = collision_point - (vec3(block_pos) + vec3(0.5)); 
	// 	// vec2 collision_point_projection = GetBlockPointProjection(relative_collision_point);

	// 	// material = GetBlockMat(current_block, collision_point_projection);
	// 	material = GetBlockMat_V2(current_block, relative_collision_point);
	// 	fraction = block_fraction;
	// }
	
	//if blocks view
	// vec3 collision_point = vec3(block_pos) - vec3(0,0,1.7);
	// vec3 viewvec = collision_point - cameraposr;
	// if (dot(normalize(viewvec), camera_ray_dir) > 0.995 && length(viewvec) < length(-camera_ray_dir * 30.0) )
	// {
		// if(material.transparancy < 0.5)
		// {
		// material.transparancy /= 10.0;
		// material.transparancy = 1.0;
		// material.smoothness   = 1.0;
		// material.emmitance   = vec3(0);
		// material.reflectance = vec3(0);
		// }
	// }

	return (block_hit || entity_hit);
}

float FresnelSchlick(in vec3 direction, in vec3 normal)
{
	float nIn = nIN;
	float nOut = nOUT;
    float R0 = ((nOut - nIn) * (nOut - nIn)) / ((nOut + nIn) * (nOut + nIn));
    float fresnel = R0 + (1.0 - R0) * pow((1.0 - abs(dot(direction, normal))), 5.0);
    return fresnel;
}
vec3 IdealRefract(vec3 direction, vec3 normal, float nIn, float nOut)
{
    // проверим, находимся ли мы внутри объекта
    // если да - учтем это при расчете сред и направления луча
    bool fromOutside = dot(normal, direction) < 0.0;
    float ratio = fromOutside ? nOut / nIn : nIn / nOut;

    vec3 refraction, reflection;
    refraction = fromOutside ? refract(direction, normal, ratio) : -refract(-direction, normal, ratio);
    reflection = reflect(direction, normal);

    // в случае полного внутренного отражения refract вернет нам 0.0
    return refraction == vec3(0.0) ? reflection : refraction;
}
bool IsRefracted(in vec3 rayDirection, in vec3 normal, in float transparancy)
{
	float fresnel = FresnelSchlick(rayDirection, normal);
	float rand = RandomFloat_0to1();
	// return (transparancy > rand);
	return (transparancy > rand) && (fresnel < rand);// && transparancy == 0.0;
}

vec3 TraceRay(in vec3 rayOrigin, in vec3 rayDirection, out vec4 normal_out)
{
	vec3 accumulated_light      = vec3(0.0);
	vec3 accumulated_reflection = vec3(1.0);

	float fraction = 0;
	vec3 normal = vec3(0);
	Material material;

	normal_out = vec4(0);
    
    for (int i = 0; i < MAX_DEPTH; i++)
    {

        bool hit = CastRay(rayOrigin, rayDirection, fraction, normal, material);

        if (hit)
        {
			vec3 newRayOrigin = rayOrigin + (fraction*rayDirection);

			vec3 hemisphereDistributedDirection = NormalOrientedHemispherePoint(Random2D(), normal);
			vec3 randomVec = normalize(2.0 * Random3D() - 1.0);

            vec3 tangent = cross(randomVec, normal);
            vec3 bitangent = cross(normal, tangent);
            mat3 transform = mat3(tangent, bitangent, normal);
            
            vec3 newRayDirection = transform * hemisphereDistributedDirection;
                

			bool refracted = IsRefracted(rayDirection, normal, material.transparancy);
			// refracted = false;
            if (refracted)
            {
                vec3 idealRefraction = IdealRefract(rayDirection, normal, nIN, nOUT);
                newRayDirection = normalize(mix(-newRayDirection, idealRefraction, material.smoothness));
                // newRayDirection = normalize(mix(idealRefraction, -newRayDirection, material.smoothness));
                newRayOrigin += normal * (dot(newRayDirection, normal) < 0.0 ? -0.001 : 0.001);
            }
            else
            {
                vec3 idealReflection = reflect(rayDirection, normal);
                newRayDirection = normalize(mix(newRayDirection, idealReflection, material.smoothness));
                newRayOrigin += normal * 0.001;
				accumulated_light += accumulated_reflection * material.emmitance;
				accumulated_reflection *= material.reflectance;
				accumulated_light += vec3(0.8) * 0.3 * accumulated_reflection;
				// if (material.reflectance != vec3(0.0)){
				// }
            }

            // newRayOrigin += normal * 0.002;

            rayDirection = newRayDirection;
            rayOrigin = newRayOrigin;

			if(i == 0)
			{
				normal_out.xyz = normal;
				normal_out.w = 1.0;
			}
			// break;
        }
        else{	
		// accumulated_light += vec3(0.2);
		break;
        }
    }
		// accumulated_light += vec3(0.045,0.04,0.03) * accumulated_reflection;
	float global_light_participance = -dot(global_light, rayDirection);
	if (global_light_participance > 0.9){
		// accumulated_light += vec3(0.97,0.95,0.9) * accumulated_reflection;
		accumulated_light += vec3(0.99, 0.98, 0.83) * accumulated_reflection;
	}
	// else if (global_light_participance > 0.1){
	// 	// accumulated_light += vec3(0.97,0.95,0.9) * accumulated_reflection;
	// 	accumulated_light += global_light_participance*vec3(0.3,0.3,0.3) * accumulated_reflection;
	// }

    return accumulated_light;
}

layout (local_size_x = 8, local_size_y = 8) in;

vec3 rotateAxis(vec3 p, vec3 axis, float angle) {
return mix(dot(axis, p)*axis, p, cos(angle)) + cross(axis,p)*sin(angle);
}

void main(void) 
{
	global_light = normalize(vec3(+0.2, +0.4, -0.75));

	// global_light = rotateAxis(global_light, vec3(1,0,0), time*2.0);
	// global_light = rotateAxis(global_light, vec3(0,1,0), time*2.0);

	ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
	ivec2 size = imageSize(framebuffer);
	if (pix.x >= size.x || pix.y >= size.y) {
		return;
	}

	vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);

	//shift pos

	randvec = pos / time;
	// randvec.x = RandomNoise(randvec);
	// randvec.x = RandomNoise(randvec);
	// randvec.y = RandomNoise(randvec);
	// randvec.y = RandomNoise(randvec);

	// vec3 pos_on_map = rotateAxis(vec3(pos,0), vec3(0,0,1), -PI/4);

	
	// vec3 camera_ray_dir = normalize(vec3(-2.8284271, -2.8284271, -3));
	// vec3 camera_ray_dir = normalize(vec3(-1, -1, -1));
	camera_ray_dir    = normalize(vec3(-0.612375, -0.612375, -0.5));

	horizline = normalize(vec3(1,-1,0));
	vertiline = normalize(cross(camera_ray_dir, horizline));
	//they define plane of rendeting
	vec3 camera_unit_x = horizline / 2;
	vec3 camera_unit_y = vertiline / 2;
	
	camera_pos = cameraposr;
	// vec3 camera_pos = vec3(0.5, 0.5, 0.5) * 5;

	view_width  = size.x / 32.0; //in blocks
	view_height = size.y / 32.0; //in blocks

	vec4 normal;
	vec4 color = vec4(0);
	for (int samplei=0; samplei < NUM_SAMPLES; samplei++)
	{
		vec2 posShift = 0.16 * (Random2D() - vec2(0.5)) / vec2(size);
		vec2 newpos = pos;
		vec3 ray_origin = camera_pos + camera_unit_x*(newpos.x-0.5)*view_width + camera_unit_y*(newpos.y-0.5)*view_height;
		color += vec4(TraceRay(ray_origin, camera_ray_dir, normal), 1) / NUM_SAMPLES;
	}

	//if alpha is zero than non-hit, else hit

	// color = texture(drawn_ents_frame, pos);	

	imageStore(framebuffer, pix, color);
	imageStore(normalbuffer, pix, normal);
}